/*
Delphix API Gateway

Delphix API Gateway API

API version: 1.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Source The Delphix representation of the source database (not typically managed by Delphix).
type Source struct {
	// The Source object entity ID.
	Id *string `json:"id,omitempty"`
	// The type of this source database.
	DatabaseType NullableString `json:"database_type,omitempty"`
	// The name of this source database.
	Name NullableString `json:"name,omitempty"`
	// The version of this source database.
	DatabaseVersion NullableString `json:"database_version,omitempty"`
	// A reference to the Environment that hosts this source database.
	EnvironmentId NullableString `json:"environment_id,omitempty"`
	// A universal ID that uniquely identifies this source database.
	DataUuid NullableString `json:"data_uuid,omitempty"`
	// The IP address of the source's host.
	IpAddress NullableString `json:"ip_address,omitempty"`
	// The FQDN of the source's host.
	Fqdn NullableString `json:"fqdn,omitempty"`
	// The total size of this source database, in bytes.
	Size NullableInt64 `json:"size,omitempty"`
	// The JDBC connection URL for this source database.
	JdbcConnectionString NullableString `json:"jdbc_connection_string,omitempty"`
	// The version of the plugin associated with this source database.
	PluginVersion NullableString `json:"plugin_version,omitempty"`
}

// NewSource instantiates a new Source object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSource() *Source {
	this := Source{}
	return &this
}

// NewSourceWithDefaults instantiates a new Source object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceWithDefaults() *Source {
	this := Source{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Source) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Source) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Source) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Source) SetId(v string) {
	o.Id = &v
}

// GetDatabaseType returns the DatabaseType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Source) GetDatabaseType() string {
	if o == nil || o.DatabaseType.Get() == nil {
		var ret string
		return ret
	}
	return *o.DatabaseType.Get()
}

// GetDatabaseTypeOk returns a tuple with the DatabaseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Source) GetDatabaseTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DatabaseType.Get(), o.DatabaseType.IsSet()
}

// HasDatabaseType returns a boolean if a field has been set.
func (o *Source) HasDatabaseType() bool {
	if o != nil && o.DatabaseType.IsSet() {
		return true
	}

	return false
}

// SetDatabaseType gets a reference to the given NullableString and assigns it to the DatabaseType field.
func (o *Source) SetDatabaseType(v string) {
	o.DatabaseType.Set(&v)
}
// SetDatabaseTypeNil sets the value for DatabaseType to be an explicit nil
func (o *Source) SetDatabaseTypeNil() {
	o.DatabaseType.Set(nil)
}

// UnsetDatabaseType ensures that no value is present for DatabaseType, not even an explicit nil
func (o *Source) UnsetDatabaseType() {
	o.DatabaseType.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Source) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Source) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *Source) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *Source) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *Source) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *Source) UnsetName() {
	o.Name.Unset()
}

// GetDatabaseVersion returns the DatabaseVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Source) GetDatabaseVersion() string {
	if o == nil || o.DatabaseVersion.Get() == nil {
		var ret string
		return ret
	}
	return *o.DatabaseVersion.Get()
}

// GetDatabaseVersionOk returns a tuple with the DatabaseVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Source) GetDatabaseVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DatabaseVersion.Get(), o.DatabaseVersion.IsSet()
}

// HasDatabaseVersion returns a boolean if a field has been set.
func (o *Source) HasDatabaseVersion() bool {
	if o != nil && o.DatabaseVersion.IsSet() {
		return true
	}

	return false
}

// SetDatabaseVersion gets a reference to the given NullableString and assigns it to the DatabaseVersion field.
func (o *Source) SetDatabaseVersion(v string) {
	o.DatabaseVersion.Set(&v)
}
// SetDatabaseVersionNil sets the value for DatabaseVersion to be an explicit nil
func (o *Source) SetDatabaseVersionNil() {
	o.DatabaseVersion.Set(nil)
}

// UnsetDatabaseVersion ensures that no value is present for DatabaseVersion, not even an explicit nil
func (o *Source) UnsetDatabaseVersion() {
	o.DatabaseVersion.Unset()
}

// GetEnvironmentId returns the EnvironmentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Source) GetEnvironmentId() string {
	if o == nil || o.EnvironmentId.Get() == nil {
		var ret string
		return ret
	}
	return *o.EnvironmentId.Get()
}

// GetEnvironmentIdOk returns a tuple with the EnvironmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Source) GetEnvironmentIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnvironmentId.Get(), o.EnvironmentId.IsSet()
}

// HasEnvironmentId returns a boolean if a field has been set.
func (o *Source) HasEnvironmentId() bool {
	if o != nil && o.EnvironmentId.IsSet() {
		return true
	}

	return false
}

// SetEnvironmentId gets a reference to the given NullableString and assigns it to the EnvironmentId field.
func (o *Source) SetEnvironmentId(v string) {
	o.EnvironmentId.Set(&v)
}
// SetEnvironmentIdNil sets the value for EnvironmentId to be an explicit nil
func (o *Source) SetEnvironmentIdNil() {
	o.EnvironmentId.Set(nil)
}

// UnsetEnvironmentId ensures that no value is present for EnvironmentId, not even an explicit nil
func (o *Source) UnsetEnvironmentId() {
	o.EnvironmentId.Unset()
}

// GetDataUuid returns the DataUuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Source) GetDataUuid() string {
	if o == nil || o.DataUuid.Get() == nil {
		var ret string
		return ret
	}
	return *o.DataUuid.Get()
}

// GetDataUuidOk returns a tuple with the DataUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Source) GetDataUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DataUuid.Get(), o.DataUuid.IsSet()
}

// HasDataUuid returns a boolean if a field has been set.
func (o *Source) HasDataUuid() bool {
	if o != nil && o.DataUuid.IsSet() {
		return true
	}

	return false
}

// SetDataUuid gets a reference to the given NullableString and assigns it to the DataUuid field.
func (o *Source) SetDataUuid(v string) {
	o.DataUuid.Set(&v)
}
// SetDataUuidNil sets the value for DataUuid to be an explicit nil
func (o *Source) SetDataUuidNil() {
	o.DataUuid.Set(nil)
}

// UnsetDataUuid ensures that no value is present for DataUuid, not even an explicit nil
func (o *Source) UnsetDataUuid() {
	o.DataUuid.Unset()
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Source) GetIpAddress() string {
	if o == nil || o.IpAddress.Get() == nil {
		var ret string
		return ret
	}
	return *o.IpAddress.Get()
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Source) GetIpAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IpAddress.Get(), o.IpAddress.IsSet()
}

// HasIpAddress returns a boolean if a field has been set.
func (o *Source) HasIpAddress() bool {
	if o != nil && o.IpAddress.IsSet() {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given NullableString and assigns it to the IpAddress field.
func (o *Source) SetIpAddress(v string) {
	o.IpAddress.Set(&v)
}
// SetIpAddressNil sets the value for IpAddress to be an explicit nil
func (o *Source) SetIpAddressNil() {
	o.IpAddress.Set(nil)
}

// UnsetIpAddress ensures that no value is present for IpAddress, not even an explicit nil
func (o *Source) UnsetIpAddress() {
	o.IpAddress.Unset()
}

// GetFqdn returns the Fqdn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Source) GetFqdn() string {
	if o == nil || o.Fqdn.Get() == nil {
		var ret string
		return ret
	}
	return *o.Fqdn.Get()
}

// GetFqdnOk returns a tuple with the Fqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Source) GetFqdnOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Fqdn.Get(), o.Fqdn.IsSet()
}

// HasFqdn returns a boolean if a field has been set.
func (o *Source) HasFqdn() bool {
	if o != nil && o.Fqdn.IsSet() {
		return true
	}

	return false
}

// SetFqdn gets a reference to the given NullableString and assigns it to the Fqdn field.
func (o *Source) SetFqdn(v string) {
	o.Fqdn.Set(&v)
}
// SetFqdnNil sets the value for Fqdn to be an explicit nil
func (o *Source) SetFqdnNil() {
	o.Fqdn.Set(nil)
}

// UnsetFqdn ensures that no value is present for Fqdn, not even an explicit nil
func (o *Source) UnsetFqdn() {
	o.Fqdn.Unset()
}

// GetSize returns the Size field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Source) GetSize() int64 {
	if o == nil || o.Size.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Size.Get()
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Source) GetSizeOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Size.Get(), o.Size.IsSet()
}

// HasSize returns a boolean if a field has been set.
func (o *Source) HasSize() bool {
	if o != nil && o.Size.IsSet() {
		return true
	}

	return false
}

// SetSize gets a reference to the given NullableInt64 and assigns it to the Size field.
func (o *Source) SetSize(v int64) {
	o.Size.Set(&v)
}
// SetSizeNil sets the value for Size to be an explicit nil
func (o *Source) SetSizeNil() {
	o.Size.Set(nil)
}

// UnsetSize ensures that no value is present for Size, not even an explicit nil
func (o *Source) UnsetSize() {
	o.Size.Unset()
}

// GetJdbcConnectionString returns the JdbcConnectionString field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Source) GetJdbcConnectionString() string {
	if o == nil || o.JdbcConnectionString.Get() == nil {
		var ret string
		return ret
	}
	return *o.JdbcConnectionString.Get()
}

// GetJdbcConnectionStringOk returns a tuple with the JdbcConnectionString field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Source) GetJdbcConnectionStringOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.JdbcConnectionString.Get(), o.JdbcConnectionString.IsSet()
}

// HasJdbcConnectionString returns a boolean if a field has been set.
func (o *Source) HasJdbcConnectionString() bool {
	if o != nil && o.JdbcConnectionString.IsSet() {
		return true
	}

	return false
}

// SetJdbcConnectionString gets a reference to the given NullableString and assigns it to the JdbcConnectionString field.
func (o *Source) SetJdbcConnectionString(v string) {
	o.JdbcConnectionString.Set(&v)
}
// SetJdbcConnectionStringNil sets the value for JdbcConnectionString to be an explicit nil
func (o *Source) SetJdbcConnectionStringNil() {
	o.JdbcConnectionString.Set(nil)
}

// UnsetJdbcConnectionString ensures that no value is present for JdbcConnectionString, not even an explicit nil
func (o *Source) UnsetJdbcConnectionString() {
	o.JdbcConnectionString.Unset()
}

// GetPluginVersion returns the PluginVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Source) GetPluginVersion() string {
	if o == nil || o.PluginVersion.Get() == nil {
		var ret string
		return ret
	}
	return *o.PluginVersion.Get()
}

// GetPluginVersionOk returns a tuple with the PluginVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Source) GetPluginVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PluginVersion.Get(), o.PluginVersion.IsSet()
}

// HasPluginVersion returns a boolean if a field has been set.
func (o *Source) HasPluginVersion() bool {
	if o != nil && o.PluginVersion.IsSet() {
		return true
	}

	return false
}

// SetPluginVersion gets a reference to the given NullableString and assigns it to the PluginVersion field.
func (o *Source) SetPluginVersion(v string) {
	o.PluginVersion.Set(&v)
}
// SetPluginVersionNil sets the value for PluginVersion to be an explicit nil
func (o *Source) SetPluginVersionNil() {
	o.PluginVersion.Set(nil)
}

// UnsetPluginVersion ensures that no value is present for PluginVersion, not even an explicit nil
func (o *Source) UnsetPluginVersion() {
	o.PluginVersion.Unset()
}

func (o Source) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.DatabaseType.IsSet() {
		toSerialize["database_type"] = o.DatabaseType.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.DatabaseVersion.IsSet() {
		toSerialize["database_version"] = o.DatabaseVersion.Get()
	}
	if o.EnvironmentId.IsSet() {
		toSerialize["environment_id"] = o.EnvironmentId.Get()
	}
	if o.DataUuid.IsSet() {
		toSerialize["data_uuid"] = o.DataUuid.Get()
	}
	if o.IpAddress.IsSet() {
		toSerialize["ip_address"] = o.IpAddress.Get()
	}
	if o.Fqdn.IsSet() {
		toSerialize["fqdn"] = o.Fqdn.Get()
	}
	if o.Size.IsSet() {
		toSerialize["size"] = o.Size.Get()
	}
	if o.JdbcConnectionString.IsSet() {
		toSerialize["jdbc_connection_string"] = o.JdbcConnectionString.Get()
	}
	if o.PluginVersion.IsSet() {
		toSerialize["plugin_version"] = o.PluginVersion.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSource struct {
	value *Source
	isSet bool
}

func (v NullableSource) Get() *Source {
	return v.value
}

func (v *NullableSource) Set(val *Source) {
	v.value = val
	v.isSet = true
}

func (v NullableSource) IsSet() bool {
	return v.isSet
}

func (v *NullableSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSource(val *Source) *NullableSource {
	return &NullableSource{value: val, isSet: true}
}

func (v NullableSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


