/*
Delphix API Gateway

Delphix API Gateway API

API version: 1.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BaseProvisionVDBParameters struct for BaseProvisionVDBParameters
type BaseProvisionVDBParameters struct {
	// The ID of the source object (dSource or VDB) to provision from. All other objects referenced by the parameters must live on the same engine as the source.
	SourceDataId *string `json:"source_data_id,omitempty"`
	// The ID of the Engine onto which to provision. If the source ID unambiguously identifies a source object, this parameter is unnecessary and ignored.
	EngineId *int64 `json:"engine_id,omitempty"`
	// The ID of the group into which the VDB will be provisioned. If unset, a group is selected randomly on the Engine.
	TargetGroupId *string `json:"target_group_id,omitempty"`
	// The unique name of the provisioned VDB within a group. If unset, a name is randomly generated.
	VdbName *string `json:"vdb_name,omitempty"`
	// The name of the database on the target environment. Defaults to vdb_name.
	DatabaseName *string `json:"database_name,omitempty"`
	// Whether to truncate log on checkpoint (ASE only).
	TruncateLogOnCheckpoint *bool `json:"truncate_log_on_checkpoint,omitempty"`
	// The name of the privileged user to run the provision operation (Oracle Only).
	Username *string `json:"username,omitempty"`
	// The password of the privileged user to run the provision operation (Oracle Only).
	Password *string `json:"password,omitempty"`
	// The ID of the target environment where to provision the VDB. If repository_id unambigously identifies a repository, this is unnecessary and ignored. Otherwise, a compatible repository is randomly selected on the environment.
	EnvironmentId *string `json:"environment_id,omitempty"`
	// The environment user ID to use to connect to the target environment.
	EnvironmentUserId *string `json:"environment_user_id,omitempty"`
	// The ID of the target repository where to provision the VDB. A repository typically corresponds to a database installation (Oracle home, database instance, ...). Setting this attribute implicitly determines the environment where to provision the VDB.
	RepositoryId *string `json:"repository_id,omitempty"`
	// Option to automatically select a compatible environment and repository. Mutually exclusive with repository_id.
	AutoSelectRepository *bool `json:"auto_select_repository,omitempty"`
	// The commands to execute on the target environment before refreshing the VDB.
	PreRefresh []Hook `json:"pre_refresh,omitempty"`
	// The commands to execute on the target environment after refreshing the VDB.
	PostRefresh []Hook `json:"post_refresh,omitempty"`
	// The commands to execute on the target environment before rewinding the VDB.
	PreRollback []Hook `json:"pre_rollback,omitempty"`
	// The commands to execute on the target environment after rewinding the VDB.
	PostRollback []Hook `json:"post_rollback,omitempty"`
	// The commands to execute on the target environment when the VDB is created or refreshed.
	ConfigureClone []Hook `json:"configure_clone,omitempty"`
	// The commands to execute on the target environment before snapshotting a virtual source. These commands can quiesce any data prior to snapshotting.
	PreSnapshot []Hook `json:"pre_snapshot,omitempty"`
	// The commands to execute on the target environment after snapshotting a virtual source.
	PostSnapshot []Hook `json:"post_snapshot,omitempty"`
	// The commands to execute on the target environment before starting a virtual source.
	PreStart []Hook `json:"pre_start,omitempty"`
	// The commands to execute on the target environment after starting a virtual source.
	PostStart []Hook `json:"post_start,omitempty"`
	// The commands to execute on the target environment before stopping a virtual source.
	PreStop []Hook `json:"pre_stop,omitempty"`
	// The commands to execute on the target environment after stopping a virtual source.
	PostStop []Hook `json:"post_stop,omitempty"`
	// Indicates whether the Engine should automatically restart this virtual source when target host reboot is detected.
	VdbRestart *bool `json:"vdb_restart,omitempty"`
	// The ID of the target VDB Template (Oracle Only).
	TemplateId *string `json:"template_id,omitempty"`
	// Target VDB file mapping rules (Oracle Only). Rules must be line separated (\\n or \\r) and each line must have the format \"pattern:replacement\". Lines are applied in order.
	FileMappingRules *string `json:"file_mapping_rules,omitempty"`
	// Target VDB SID name (Oracle Only).
	OracleInstanceName *string `json:"oracle_instance_name,omitempty"`
	// Target VDB db_unique_name (Oracle Only).
	UniqueName *string `json:"unique_name,omitempty"`
	// Mount point for the VDB (Oracle, ASE Only).
	MountPoint *string `json:"mount_point,omitempty"`
	// Whether to open the database after provision (Oracle Only).
	OpenResetLogs *bool `json:"open_reset_logs,omitempty"`
	// The ID of the snapshot policy for the VDB.
	SnapshotPolicyId *string `json:"snapshot_policy_id,omitempty"`
	// The ID of the retention policy for the VDB.
	RetentionPolicyId *string `json:"retention_policy_id,omitempty"`
	// Recovery model of the source database (MSSql Only).
	RecoveryModel *string `json:"recovery_model,omitempty"`
	// PowerShell script or executable to run prior to provisioning (MSSql Only).
	PreScript *string `json:"pre_script,omitempty"`
	// PowerShell script or executable to run after provisioning (MSSql Only).
	PostScript *string `json:"post_script,omitempty"`
	// Option to enable change data capture (CDC) on both the provisioned VDB and subsequent snapshot-related operations (e.g. refresh, rewind) (MSSql Only).
	CdcOnProvision *bool `json:"cdc_on_provision,omitempty"`
	// Online log size in MB (Oracle Only).
	OnlineLogSize *int32 `json:"online_log_size,omitempty"`
	// Number of online log groups (Oracle Only).
	OnlineLogGroups *int32 `json:"online_log_groups,omitempty"`
	// Option to create a VDB in archivelog mode (Oracle Only).
	ArchiveLog *bool `json:"archive_log,omitempty"`
	// Option to generate a new DB ID for the created VDB (Oracle Only).
	NewDbid *bool `json:"new_dbid,omitempty"`
	// The listener IDs for this provision operation (Oracle Only).
	ListenerIds []string `json:"listener_ids,omitempty"`
	// Environment variable to be set when the engine creates a VDB. See the Engine documentation for the list of allowed/denied environment variables and rules about substitution.
	CustomEnvVars *map[string]string `json:"custom_env_vars,omitempty"`
	// Environment files to be sourced when the Engine creates a VDB. This path can be followed by parameters. Paths and parameters are separated by spaces.
	CustomEnvFiles []string `json:"custom_env_files,omitempty"`
}

// NewBaseProvisionVDBParameters instantiates a new BaseProvisionVDBParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseProvisionVDBParameters() *BaseProvisionVDBParameters {
	this := BaseProvisionVDBParameters{}
	return &this
}

// NewBaseProvisionVDBParametersWithDefaults instantiates a new BaseProvisionVDBParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseProvisionVDBParametersWithDefaults() *BaseProvisionVDBParameters {
	this := BaseProvisionVDBParameters{}
	return &this
}

// GetSourceDataId returns the SourceDataId field value if set, zero value otherwise.
func (o *BaseProvisionVDBParameters) GetSourceDataId() string {
	if o == nil || o.SourceDataId == nil {
		var ret string
		return ret
	}
	return *o.SourceDataId
}

// GetSourceDataIdOk returns a tuple with the SourceDataId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParameters) GetSourceDataIdOk() (*string, bool) {
	if o == nil || o.SourceDataId == nil {
		return nil, false
	}
	return o.SourceDataId, true
}

// HasSourceDataId returns a boolean if a field has been set.
func (o *BaseProvisionVDBParameters) HasSourceDataId() bool {
	if o != nil && o.SourceDataId != nil {
		return true
	}

	return false
}

// SetSourceDataId gets a reference to the given string and assigns it to the SourceDataId field.
func (o *BaseProvisionVDBParameters) SetSourceDataId(v string) {
	o.SourceDataId = &v
}

// GetEngineId returns the EngineId field value if set, zero value otherwise.
func (o *BaseProvisionVDBParameters) GetEngineId() int64 {
	if o == nil || o.EngineId == nil {
		var ret int64
		return ret
	}
	return *o.EngineId
}

// GetEngineIdOk returns a tuple with the EngineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParameters) GetEngineIdOk() (*int64, bool) {
	if o == nil || o.EngineId == nil {
		return nil, false
	}
	return o.EngineId, true
}

// HasEngineId returns a boolean if a field has been set.
func (o *BaseProvisionVDBParameters) HasEngineId() bool {
	if o != nil && o.EngineId != nil {
		return true
	}

	return false
}

// SetEngineId gets a reference to the given int64 and assigns it to the EngineId field.
func (o *BaseProvisionVDBParameters) SetEngineId(v int64) {
	o.EngineId = &v
}

// GetTargetGroupId returns the TargetGroupId field value if set, zero value otherwise.
func (o *BaseProvisionVDBParameters) GetTargetGroupId() string {
	if o == nil || o.TargetGroupId == nil {
		var ret string
		return ret
	}
	return *o.TargetGroupId
}

// GetTargetGroupIdOk returns a tuple with the TargetGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParameters) GetTargetGroupIdOk() (*string, bool) {
	if o == nil || o.TargetGroupId == nil {
		return nil, false
	}
	return o.TargetGroupId, true
}

// HasTargetGroupId returns a boolean if a field has been set.
func (o *BaseProvisionVDBParameters) HasTargetGroupId() bool {
	if o != nil && o.TargetGroupId != nil {
		return true
	}

	return false
}

// SetTargetGroupId gets a reference to the given string and assigns it to the TargetGroupId field.
func (o *BaseProvisionVDBParameters) SetTargetGroupId(v string) {
	o.TargetGroupId = &v
}

// GetVdbName returns the VdbName field value if set, zero value otherwise.
func (o *BaseProvisionVDBParameters) GetVdbName() string {
	if o == nil || o.VdbName == nil {
		var ret string
		return ret
	}
	return *o.VdbName
}

// GetVdbNameOk returns a tuple with the VdbName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParameters) GetVdbNameOk() (*string, bool) {
	if o == nil || o.VdbName == nil {
		return nil, false
	}
	return o.VdbName, true
}

// HasVdbName returns a boolean if a field has been set.
func (o *BaseProvisionVDBParameters) HasVdbName() bool {
	if o != nil && o.VdbName != nil {
		return true
	}

	return false
}

// SetVdbName gets a reference to the given string and assigns it to the VdbName field.
func (o *BaseProvisionVDBParameters) SetVdbName(v string) {
	o.VdbName = &v
}

// GetDatabaseName returns the DatabaseName field value if set, zero value otherwise.
func (o *BaseProvisionVDBParameters) GetDatabaseName() string {
	if o == nil || o.DatabaseName == nil {
		var ret string
		return ret
	}
	return *o.DatabaseName
}

// GetDatabaseNameOk returns a tuple with the DatabaseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParameters) GetDatabaseNameOk() (*string, bool) {
	if o == nil || o.DatabaseName == nil {
		return nil, false
	}
	return o.DatabaseName, true
}

// HasDatabaseName returns a boolean if a field has been set.
func (o *BaseProvisionVDBParameters) HasDatabaseName() bool {
	if o != nil && o.DatabaseName != nil {
		return true
	}

	return false
}

// SetDatabaseName gets a reference to the given string and assigns it to the DatabaseName field.
func (o *BaseProvisionVDBParameters) SetDatabaseName(v string) {
	o.DatabaseName = &v
}

// GetTruncateLogOnCheckpoint returns the TruncateLogOnCheckpoint field value if set, zero value otherwise.
func (o *BaseProvisionVDBParameters) GetTruncateLogOnCheckpoint() bool {
	if o == nil || o.TruncateLogOnCheckpoint == nil {
		var ret bool
		return ret
	}
	return *o.TruncateLogOnCheckpoint
}

// GetTruncateLogOnCheckpointOk returns a tuple with the TruncateLogOnCheckpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParameters) GetTruncateLogOnCheckpointOk() (*bool, bool) {
	if o == nil || o.TruncateLogOnCheckpoint == nil {
		return nil, false
	}
	return o.TruncateLogOnCheckpoint, true
}

// HasTruncateLogOnCheckpoint returns a boolean if a field has been set.
func (o *BaseProvisionVDBParameters) HasTruncateLogOnCheckpoint() bool {
	if o != nil && o.TruncateLogOnCheckpoint != nil {
		return true
	}

	return false
}

// SetTruncateLogOnCheckpoint gets a reference to the given bool and assigns it to the TruncateLogOnCheckpoint field.
func (o *BaseProvisionVDBParameters) SetTruncateLogOnCheckpoint(v bool) {
	o.TruncateLogOnCheckpoint = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *BaseProvisionVDBParameters) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParameters) GetUsernameOk() (*string, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *BaseProvisionVDBParameters) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *BaseProvisionVDBParameters) SetUsername(v string) {
	o.Username = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *BaseProvisionVDBParameters) GetPassword() string {
	if o == nil || o.Password == nil {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParameters) GetPasswordOk() (*string, bool) {
	if o == nil || o.Password == nil {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *BaseProvisionVDBParameters) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *BaseProvisionVDBParameters) SetPassword(v string) {
	o.Password = &v
}

// GetEnvironmentId returns the EnvironmentId field value if set, zero value otherwise.
func (o *BaseProvisionVDBParameters) GetEnvironmentId() string {
	if o == nil || o.EnvironmentId == nil {
		var ret string
		return ret
	}
	return *o.EnvironmentId
}

// GetEnvironmentIdOk returns a tuple with the EnvironmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParameters) GetEnvironmentIdOk() (*string, bool) {
	if o == nil || o.EnvironmentId == nil {
		return nil, false
	}
	return o.EnvironmentId, true
}

// HasEnvironmentId returns a boolean if a field has been set.
func (o *BaseProvisionVDBParameters) HasEnvironmentId() bool {
	if o != nil && o.EnvironmentId != nil {
		return true
	}

	return false
}

// SetEnvironmentId gets a reference to the given string and assigns it to the EnvironmentId field.
func (o *BaseProvisionVDBParameters) SetEnvironmentId(v string) {
	o.EnvironmentId = &v
}

// GetEnvironmentUserId returns the EnvironmentUserId field value if set, zero value otherwise.
func (o *BaseProvisionVDBParameters) GetEnvironmentUserId() string {
	if o == nil || o.EnvironmentUserId == nil {
		var ret string
		return ret
	}
	return *o.EnvironmentUserId
}

// GetEnvironmentUserIdOk returns a tuple with the EnvironmentUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParameters) GetEnvironmentUserIdOk() (*string, bool) {
	if o == nil || o.EnvironmentUserId == nil {
		return nil, false
	}
	return o.EnvironmentUserId, true
}

// HasEnvironmentUserId returns a boolean if a field has been set.
func (o *BaseProvisionVDBParameters) HasEnvironmentUserId() bool {
	if o != nil && o.EnvironmentUserId != nil {
		return true
	}

	return false
}

// SetEnvironmentUserId gets a reference to the given string and assigns it to the EnvironmentUserId field.
func (o *BaseProvisionVDBParameters) SetEnvironmentUserId(v string) {
	o.EnvironmentUserId = &v
}

// GetRepositoryId returns the RepositoryId field value if set, zero value otherwise.
func (o *BaseProvisionVDBParameters) GetRepositoryId() string {
	if o == nil || o.RepositoryId == nil {
		var ret string
		return ret
	}
	return *o.RepositoryId
}

// GetRepositoryIdOk returns a tuple with the RepositoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParameters) GetRepositoryIdOk() (*string, bool) {
	if o == nil || o.RepositoryId == nil {
		return nil, false
	}
	return o.RepositoryId, true
}

// HasRepositoryId returns a boolean if a field has been set.
func (o *BaseProvisionVDBParameters) HasRepositoryId() bool {
	if o != nil && o.RepositoryId != nil {
		return true
	}

	return false
}

// SetRepositoryId gets a reference to the given string and assigns it to the RepositoryId field.
func (o *BaseProvisionVDBParameters) SetRepositoryId(v string) {
	o.RepositoryId = &v
}

// GetAutoSelectRepository returns the AutoSelectRepository field value if set, zero value otherwise.
func (o *BaseProvisionVDBParameters) GetAutoSelectRepository() bool {
	if o == nil || o.AutoSelectRepository == nil {
		var ret bool
		return ret
	}
	return *o.AutoSelectRepository
}

// GetAutoSelectRepositoryOk returns a tuple with the AutoSelectRepository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParameters) GetAutoSelectRepositoryOk() (*bool, bool) {
	if o == nil || o.AutoSelectRepository == nil {
		return nil, false
	}
	return o.AutoSelectRepository, true
}

// HasAutoSelectRepository returns a boolean if a field has been set.
func (o *BaseProvisionVDBParameters) HasAutoSelectRepository() bool {
	if o != nil && o.AutoSelectRepository != nil {
		return true
	}

	return false
}

// SetAutoSelectRepository gets a reference to the given bool and assigns it to the AutoSelectRepository field.
func (o *BaseProvisionVDBParameters) SetAutoSelectRepository(v bool) {
	o.AutoSelectRepository = &v
}

// GetPreRefresh returns the PreRefresh field value if set, zero value otherwise.
func (o *BaseProvisionVDBParameters) GetPreRefresh() []Hook {
	if o == nil || o.PreRefresh == nil {
		var ret []Hook
		return ret
	}
	return o.PreRefresh
}

// GetPreRefreshOk returns a tuple with the PreRefresh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParameters) GetPreRefreshOk() ([]Hook, bool) {
	if o == nil || o.PreRefresh == nil {
		return nil, false
	}
	return o.PreRefresh, true
}

// HasPreRefresh returns a boolean if a field has been set.
func (o *BaseProvisionVDBParameters) HasPreRefresh() bool {
	if o != nil && o.PreRefresh != nil {
		return true
	}

	return false
}

// SetPreRefresh gets a reference to the given []Hook and assigns it to the PreRefresh field.
func (o *BaseProvisionVDBParameters) SetPreRefresh(v []Hook) {
	o.PreRefresh = v
}

// GetPostRefresh returns the PostRefresh field value if set, zero value otherwise.
func (o *BaseProvisionVDBParameters) GetPostRefresh() []Hook {
	if o == nil || o.PostRefresh == nil {
		var ret []Hook
		return ret
	}
	return o.PostRefresh
}

// GetPostRefreshOk returns a tuple with the PostRefresh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParameters) GetPostRefreshOk() ([]Hook, bool) {
	if o == nil || o.PostRefresh == nil {
		return nil, false
	}
	return o.PostRefresh, true
}

// HasPostRefresh returns a boolean if a field has been set.
func (o *BaseProvisionVDBParameters) HasPostRefresh() bool {
	if o != nil && o.PostRefresh != nil {
		return true
	}

	return false
}

// SetPostRefresh gets a reference to the given []Hook and assigns it to the PostRefresh field.
func (o *BaseProvisionVDBParameters) SetPostRefresh(v []Hook) {
	o.PostRefresh = v
}

// GetPreRollback returns the PreRollback field value if set, zero value otherwise.
func (o *BaseProvisionVDBParameters) GetPreRollback() []Hook {
	if o == nil || o.PreRollback == nil {
		var ret []Hook
		return ret
	}
	return o.PreRollback
}

// GetPreRollbackOk returns a tuple with the PreRollback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParameters) GetPreRollbackOk() ([]Hook, bool) {
	if o == nil || o.PreRollback == nil {
		return nil, false
	}
	return o.PreRollback, true
}

// HasPreRollback returns a boolean if a field has been set.
func (o *BaseProvisionVDBParameters) HasPreRollback() bool {
	if o != nil && o.PreRollback != nil {
		return true
	}

	return false
}

// SetPreRollback gets a reference to the given []Hook and assigns it to the PreRollback field.
func (o *BaseProvisionVDBParameters) SetPreRollback(v []Hook) {
	o.PreRollback = v
}

// GetPostRollback returns the PostRollback field value if set, zero value otherwise.
func (o *BaseProvisionVDBParameters) GetPostRollback() []Hook {
	if o == nil || o.PostRollback == nil {
		var ret []Hook
		return ret
	}
	return o.PostRollback
}

// GetPostRollbackOk returns a tuple with the PostRollback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParameters) GetPostRollbackOk() ([]Hook, bool) {
	if o == nil || o.PostRollback == nil {
		return nil, false
	}
	return o.PostRollback, true
}

// HasPostRollback returns a boolean if a field has been set.
func (o *BaseProvisionVDBParameters) HasPostRollback() bool {
	if o != nil && o.PostRollback != nil {
		return true
	}

	return false
}

// SetPostRollback gets a reference to the given []Hook and assigns it to the PostRollback field.
func (o *BaseProvisionVDBParameters) SetPostRollback(v []Hook) {
	o.PostRollback = v
}

// GetConfigureClone returns the ConfigureClone field value if set, zero value otherwise.
func (o *BaseProvisionVDBParameters) GetConfigureClone() []Hook {
	if o == nil || o.ConfigureClone == nil {
		var ret []Hook
		return ret
	}
	return o.ConfigureClone
}

// GetConfigureCloneOk returns a tuple with the ConfigureClone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParameters) GetConfigureCloneOk() ([]Hook, bool) {
	if o == nil || o.ConfigureClone == nil {
		return nil, false
	}
	return o.ConfigureClone, true
}

// HasConfigureClone returns a boolean if a field has been set.
func (o *BaseProvisionVDBParameters) HasConfigureClone() bool {
	if o != nil && o.ConfigureClone != nil {
		return true
	}

	return false
}

// SetConfigureClone gets a reference to the given []Hook and assigns it to the ConfigureClone field.
func (o *BaseProvisionVDBParameters) SetConfigureClone(v []Hook) {
	o.ConfigureClone = v
}

// GetPreSnapshot returns the PreSnapshot field value if set, zero value otherwise.
func (o *BaseProvisionVDBParameters) GetPreSnapshot() []Hook {
	if o == nil || o.PreSnapshot == nil {
		var ret []Hook
		return ret
	}
	return o.PreSnapshot
}

// GetPreSnapshotOk returns a tuple with the PreSnapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParameters) GetPreSnapshotOk() ([]Hook, bool) {
	if o == nil || o.PreSnapshot == nil {
		return nil, false
	}
	return o.PreSnapshot, true
}

// HasPreSnapshot returns a boolean if a field has been set.
func (o *BaseProvisionVDBParameters) HasPreSnapshot() bool {
	if o != nil && o.PreSnapshot != nil {
		return true
	}

	return false
}

// SetPreSnapshot gets a reference to the given []Hook and assigns it to the PreSnapshot field.
func (o *BaseProvisionVDBParameters) SetPreSnapshot(v []Hook) {
	o.PreSnapshot = v
}

// GetPostSnapshot returns the PostSnapshot field value if set, zero value otherwise.
func (o *BaseProvisionVDBParameters) GetPostSnapshot() []Hook {
	if o == nil || o.PostSnapshot == nil {
		var ret []Hook
		return ret
	}
	return o.PostSnapshot
}

// GetPostSnapshotOk returns a tuple with the PostSnapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParameters) GetPostSnapshotOk() ([]Hook, bool) {
	if o == nil || o.PostSnapshot == nil {
		return nil, false
	}
	return o.PostSnapshot, true
}

// HasPostSnapshot returns a boolean if a field has been set.
func (o *BaseProvisionVDBParameters) HasPostSnapshot() bool {
	if o != nil && o.PostSnapshot != nil {
		return true
	}

	return false
}

// SetPostSnapshot gets a reference to the given []Hook and assigns it to the PostSnapshot field.
func (o *BaseProvisionVDBParameters) SetPostSnapshot(v []Hook) {
	o.PostSnapshot = v
}

// GetPreStart returns the PreStart field value if set, zero value otherwise.
func (o *BaseProvisionVDBParameters) GetPreStart() []Hook {
	if o == nil || o.PreStart == nil {
		var ret []Hook
		return ret
	}
	return o.PreStart
}

// GetPreStartOk returns a tuple with the PreStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParameters) GetPreStartOk() ([]Hook, bool) {
	if o == nil || o.PreStart == nil {
		return nil, false
	}
	return o.PreStart, true
}

// HasPreStart returns a boolean if a field has been set.
func (o *BaseProvisionVDBParameters) HasPreStart() bool {
	if o != nil && o.PreStart != nil {
		return true
	}

	return false
}

// SetPreStart gets a reference to the given []Hook and assigns it to the PreStart field.
func (o *BaseProvisionVDBParameters) SetPreStart(v []Hook) {
	o.PreStart = v
}

// GetPostStart returns the PostStart field value if set, zero value otherwise.
func (o *BaseProvisionVDBParameters) GetPostStart() []Hook {
	if o == nil || o.PostStart == nil {
		var ret []Hook
		return ret
	}
	return o.PostStart
}

// GetPostStartOk returns a tuple with the PostStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParameters) GetPostStartOk() ([]Hook, bool) {
	if o == nil || o.PostStart == nil {
		return nil, false
	}
	return o.PostStart, true
}

// HasPostStart returns a boolean if a field has been set.
func (o *BaseProvisionVDBParameters) HasPostStart() bool {
	if o != nil && o.PostStart != nil {
		return true
	}

	return false
}

// SetPostStart gets a reference to the given []Hook and assigns it to the PostStart field.
func (o *BaseProvisionVDBParameters) SetPostStart(v []Hook) {
	o.PostStart = v
}

// GetPreStop returns the PreStop field value if set, zero value otherwise.
func (o *BaseProvisionVDBParameters) GetPreStop() []Hook {
	if o == nil || o.PreStop == nil {
		var ret []Hook
		return ret
	}
	return o.PreStop
}

// GetPreStopOk returns a tuple with the PreStop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParameters) GetPreStopOk() ([]Hook, bool) {
	if o == nil || o.PreStop == nil {
		return nil, false
	}
	return o.PreStop, true
}

// HasPreStop returns a boolean if a field has been set.
func (o *BaseProvisionVDBParameters) HasPreStop() bool {
	if o != nil && o.PreStop != nil {
		return true
	}

	return false
}

// SetPreStop gets a reference to the given []Hook and assigns it to the PreStop field.
func (o *BaseProvisionVDBParameters) SetPreStop(v []Hook) {
	o.PreStop = v
}

// GetPostStop returns the PostStop field value if set, zero value otherwise.
func (o *BaseProvisionVDBParameters) GetPostStop() []Hook {
	if o == nil || o.PostStop == nil {
		var ret []Hook
		return ret
	}
	return o.PostStop
}

// GetPostStopOk returns a tuple with the PostStop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParameters) GetPostStopOk() ([]Hook, bool) {
	if o == nil || o.PostStop == nil {
		return nil, false
	}
	return o.PostStop, true
}

// HasPostStop returns a boolean if a field has been set.
func (o *BaseProvisionVDBParameters) HasPostStop() bool {
	if o != nil && o.PostStop != nil {
		return true
	}

	return false
}

// SetPostStop gets a reference to the given []Hook and assigns it to the PostStop field.
func (o *BaseProvisionVDBParameters) SetPostStop(v []Hook) {
	o.PostStop = v
}

// GetVdbRestart returns the VdbRestart field value if set, zero value otherwise.
func (o *BaseProvisionVDBParameters) GetVdbRestart() bool {
	if o == nil || o.VdbRestart == nil {
		var ret bool
		return ret
	}
	return *o.VdbRestart
}

// GetVdbRestartOk returns a tuple with the VdbRestart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParameters) GetVdbRestartOk() (*bool, bool) {
	if o == nil || o.VdbRestart == nil {
		return nil, false
	}
	return o.VdbRestart, true
}

// HasVdbRestart returns a boolean if a field has been set.
func (o *BaseProvisionVDBParameters) HasVdbRestart() bool {
	if o != nil && o.VdbRestart != nil {
		return true
	}

	return false
}

// SetVdbRestart gets a reference to the given bool and assigns it to the VdbRestart field.
func (o *BaseProvisionVDBParameters) SetVdbRestart(v bool) {
	o.VdbRestart = &v
}

// GetTemplateId returns the TemplateId field value if set, zero value otherwise.
func (o *BaseProvisionVDBParameters) GetTemplateId() string {
	if o == nil || o.TemplateId == nil {
		var ret string
		return ret
	}
	return *o.TemplateId
}

// GetTemplateIdOk returns a tuple with the TemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParameters) GetTemplateIdOk() (*string, bool) {
	if o == nil || o.TemplateId == nil {
		return nil, false
	}
	return o.TemplateId, true
}

// HasTemplateId returns a boolean if a field has been set.
func (o *BaseProvisionVDBParameters) HasTemplateId() bool {
	if o != nil && o.TemplateId != nil {
		return true
	}

	return false
}

// SetTemplateId gets a reference to the given string and assigns it to the TemplateId field.
func (o *BaseProvisionVDBParameters) SetTemplateId(v string) {
	o.TemplateId = &v
}

// GetFileMappingRules returns the FileMappingRules field value if set, zero value otherwise.
func (o *BaseProvisionVDBParameters) GetFileMappingRules() string {
	if o == nil || o.FileMappingRules == nil {
		var ret string
		return ret
	}
	return *o.FileMappingRules
}

// GetFileMappingRulesOk returns a tuple with the FileMappingRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParameters) GetFileMappingRulesOk() (*string, bool) {
	if o == nil || o.FileMappingRules == nil {
		return nil, false
	}
	return o.FileMappingRules, true
}

// HasFileMappingRules returns a boolean if a field has been set.
func (o *BaseProvisionVDBParameters) HasFileMappingRules() bool {
	if o != nil && o.FileMappingRules != nil {
		return true
	}

	return false
}

// SetFileMappingRules gets a reference to the given string and assigns it to the FileMappingRules field.
func (o *BaseProvisionVDBParameters) SetFileMappingRules(v string) {
	o.FileMappingRules = &v
}

// GetOracleInstanceName returns the OracleInstanceName field value if set, zero value otherwise.
func (o *BaseProvisionVDBParameters) GetOracleInstanceName() string {
	if o == nil || o.OracleInstanceName == nil {
		var ret string
		return ret
	}
	return *o.OracleInstanceName
}

// GetOracleInstanceNameOk returns a tuple with the OracleInstanceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParameters) GetOracleInstanceNameOk() (*string, bool) {
	if o == nil || o.OracleInstanceName == nil {
		return nil, false
	}
	return o.OracleInstanceName, true
}

// HasOracleInstanceName returns a boolean if a field has been set.
func (o *BaseProvisionVDBParameters) HasOracleInstanceName() bool {
	if o != nil && o.OracleInstanceName != nil {
		return true
	}

	return false
}

// SetOracleInstanceName gets a reference to the given string and assigns it to the OracleInstanceName field.
func (o *BaseProvisionVDBParameters) SetOracleInstanceName(v string) {
	o.OracleInstanceName = &v
}

// GetUniqueName returns the UniqueName field value if set, zero value otherwise.
func (o *BaseProvisionVDBParameters) GetUniqueName() string {
	if o == nil || o.UniqueName == nil {
		var ret string
		return ret
	}
	return *o.UniqueName
}

// GetUniqueNameOk returns a tuple with the UniqueName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParameters) GetUniqueNameOk() (*string, bool) {
	if o == nil || o.UniqueName == nil {
		return nil, false
	}
	return o.UniqueName, true
}

// HasUniqueName returns a boolean if a field has been set.
func (o *BaseProvisionVDBParameters) HasUniqueName() bool {
	if o != nil && o.UniqueName != nil {
		return true
	}

	return false
}

// SetUniqueName gets a reference to the given string and assigns it to the UniqueName field.
func (o *BaseProvisionVDBParameters) SetUniqueName(v string) {
	o.UniqueName = &v
}

// GetMountPoint returns the MountPoint field value if set, zero value otherwise.
func (o *BaseProvisionVDBParameters) GetMountPoint() string {
	if o == nil || o.MountPoint == nil {
		var ret string
		return ret
	}
	return *o.MountPoint
}

// GetMountPointOk returns a tuple with the MountPoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParameters) GetMountPointOk() (*string, bool) {
	if o == nil || o.MountPoint == nil {
		return nil, false
	}
	return o.MountPoint, true
}

// HasMountPoint returns a boolean if a field has been set.
func (o *BaseProvisionVDBParameters) HasMountPoint() bool {
	if o != nil && o.MountPoint != nil {
		return true
	}

	return false
}

// SetMountPoint gets a reference to the given string and assigns it to the MountPoint field.
func (o *BaseProvisionVDBParameters) SetMountPoint(v string) {
	o.MountPoint = &v
}

// GetOpenResetLogs returns the OpenResetLogs field value if set, zero value otherwise.
func (o *BaseProvisionVDBParameters) GetOpenResetLogs() bool {
	if o == nil || o.OpenResetLogs == nil {
		var ret bool
		return ret
	}
	return *o.OpenResetLogs
}

// GetOpenResetLogsOk returns a tuple with the OpenResetLogs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParameters) GetOpenResetLogsOk() (*bool, bool) {
	if o == nil || o.OpenResetLogs == nil {
		return nil, false
	}
	return o.OpenResetLogs, true
}

// HasOpenResetLogs returns a boolean if a field has been set.
func (o *BaseProvisionVDBParameters) HasOpenResetLogs() bool {
	if o != nil && o.OpenResetLogs != nil {
		return true
	}

	return false
}

// SetOpenResetLogs gets a reference to the given bool and assigns it to the OpenResetLogs field.
func (o *BaseProvisionVDBParameters) SetOpenResetLogs(v bool) {
	o.OpenResetLogs = &v
}

// GetSnapshotPolicyId returns the SnapshotPolicyId field value if set, zero value otherwise.
func (o *BaseProvisionVDBParameters) GetSnapshotPolicyId() string {
	if o == nil || o.SnapshotPolicyId == nil {
		var ret string
		return ret
	}
	return *o.SnapshotPolicyId
}

// GetSnapshotPolicyIdOk returns a tuple with the SnapshotPolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParameters) GetSnapshotPolicyIdOk() (*string, bool) {
	if o == nil || o.SnapshotPolicyId == nil {
		return nil, false
	}
	return o.SnapshotPolicyId, true
}

// HasSnapshotPolicyId returns a boolean if a field has been set.
func (o *BaseProvisionVDBParameters) HasSnapshotPolicyId() bool {
	if o != nil && o.SnapshotPolicyId != nil {
		return true
	}

	return false
}

// SetSnapshotPolicyId gets a reference to the given string and assigns it to the SnapshotPolicyId field.
func (o *BaseProvisionVDBParameters) SetSnapshotPolicyId(v string) {
	o.SnapshotPolicyId = &v
}

// GetRetentionPolicyId returns the RetentionPolicyId field value if set, zero value otherwise.
func (o *BaseProvisionVDBParameters) GetRetentionPolicyId() string {
	if o == nil || o.RetentionPolicyId == nil {
		var ret string
		return ret
	}
	return *o.RetentionPolicyId
}

// GetRetentionPolicyIdOk returns a tuple with the RetentionPolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParameters) GetRetentionPolicyIdOk() (*string, bool) {
	if o == nil || o.RetentionPolicyId == nil {
		return nil, false
	}
	return o.RetentionPolicyId, true
}

// HasRetentionPolicyId returns a boolean if a field has been set.
func (o *BaseProvisionVDBParameters) HasRetentionPolicyId() bool {
	if o != nil && o.RetentionPolicyId != nil {
		return true
	}

	return false
}

// SetRetentionPolicyId gets a reference to the given string and assigns it to the RetentionPolicyId field.
func (o *BaseProvisionVDBParameters) SetRetentionPolicyId(v string) {
	o.RetentionPolicyId = &v
}

// GetRecoveryModel returns the RecoveryModel field value if set, zero value otherwise.
func (o *BaseProvisionVDBParameters) GetRecoveryModel() string {
	if o == nil || o.RecoveryModel == nil {
		var ret string
		return ret
	}
	return *o.RecoveryModel
}

// GetRecoveryModelOk returns a tuple with the RecoveryModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParameters) GetRecoveryModelOk() (*string, bool) {
	if o == nil || o.RecoveryModel == nil {
		return nil, false
	}
	return o.RecoveryModel, true
}

// HasRecoveryModel returns a boolean if a field has been set.
func (o *BaseProvisionVDBParameters) HasRecoveryModel() bool {
	if o != nil && o.RecoveryModel != nil {
		return true
	}

	return false
}

// SetRecoveryModel gets a reference to the given string and assigns it to the RecoveryModel field.
func (o *BaseProvisionVDBParameters) SetRecoveryModel(v string) {
	o.RecoveryModel = &v
}

// GetPreScript returns the PreScript field value if set, zero value otherwise.
func (o *BaseProvisionVDBParameters) GetPreScript() string {
	if o == nil || o.PreScript == nil {
		var ret string
		return ret
	}
	return *o.PreScript
}

// GetPreScriptOk returns a tuple with the PreScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParameters) GetPreScriptOk() (*string, bool) {
	if o == nil || o.PreScript == nil {
		return nil, false
	}
	return o.PreScript, true
}

// HasPreScript returns a boolean if a field has been set.
func (o *BaseProvisionVDBParameters) HasPreScript() bool {
	if o != nil && o.PreScript != nil {
		return true
	}

	return false
}

// SetPreScript gets a reference to the given string and assigns it to the PreScript field.
func (o *BaseProvisionVDBParameters) SetPreScript(v string) {
	o.PreScript = &v
}

// GetPostScript returns the PostScript field value if set, zero value otherwise.
func (o *BaseProvisionVDBParameters) GetPostScript() string {
	if o == nil || o.PostScript == nil {
		var ret string
		return ret
	}
	return *o.PostScript
}

// GetPostScriptOk returns a tuple with the PostScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParameters) GetPostScriptOk() (*string, bool) {
	if o == nil || o.PostScript == nil {
		return nil, false
	}
	return o.PostScript, true
}

// HasPostScript returns a boolean if a field has been set.
func (o *BaseProvisionVDBParameters) HasPostScript() bool {
	if o != nil && o.PostScript != nil {
		return true
	}

	return false
}

// SetPostScript gets a reference to the given string and assigns it to the PostScript field.
func (o *BaseProvisionVDBParameters) SetPostScript(v string) {
	o.PostScript = &v
}

// GetCdcOnProvision returns the CdcOnProvision field value if set, zero value otherwise.
func (o *BaseProvisionVDBParameters) GetCdcOnProvision() bool {
	if o == nil || o.CdcOnProvision == nil {
		var ret bool
		return ret
	}
	return *o.CdcOnProvision
}

// GetCdcOnProvisionOk returns a tuple with the CdcOnProvision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParameters) GetCdcOnProvisionOk() (*bool, bool) {
	if o == nil || o.CdcOnProvision == nil {
		return nil, false
	}
	return o.CdcOnProvision, true
}

// HasCdcOnProvision returns a boolean if a field has been set.
func (o *BaseProvisionVDBParameters) HasCdcOnProvision() bool {
	if o != nil && o.CdcOnProvision != nil {
		return true
	}

	return false
}

// SetCdcOnProvision gets a reference to the given bool and assigns it to the CdcOnProvision field.
func (o *BaseProvisionVDBParameters) SetCdcOnProvision(v bool) {
	o.CdcOnProvision = &v
}

// GetOnlineLogSize returns the OnlineLogSize field value if set, zero value otherwise.
func (o *BaseProvisionVDBParameters) GetOnlineLogSize() int32 {
	if o == nil || o.OnlineLogSize == nil {
		var ret int32
		return ret
	}
	return *o.OnlineLogSize
}

// GetOnlineLogSizeOk returns a tuple with the OnlineLogSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParameters) GetOnlineLogSizeOk() (*int32, bool) {
	if o == nil || o.OnlineLogSize == nil {
		return nil, false
	}
	return o.OnlineLogSize, true
}

// HasOnlineLogSize returns a boolean if a field has been set.
func (o *BaseProvisionVDBParameters) HasOnlineLogSize() bool {
	if o != nil && o.OnlineLogSize != nil {
		return true
	}

	return false
}

// SetOnlineLogSize gets a reference to the given int32 and assigns it to the OnlineLogSize field.
func (o *BaseProvisionVDBParameters) SetOnlineLogSize(v int32) {
	o.OnlineLogSize = &v
}

// GetOnlineLogGroups returns the OnlineLogGroups field value if set, zero value otherwise.
func (o *BaseProvisionVDBParameters) GetOnlineLogGroups() int32 {
	if o == nil || o.OnlineLogGroups == nil {
		var ret int32
		return ret
	}
	return *o.OnlineLogGroups
}

// GetOnlineLogGroupsOk returns a tuple with the OnlineLogGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParameters) GetOnlineLogGroupsOk() (*int32, bool) {
	if o == nil || o.OnlineLogGroups == nil {
		return nil, false
	}
	return o.OnlineLogGroups, true
}

// HasOnlineLogGroups returns a boolean if a field has been set.
func (o *BaseProvisionVDBParameters) HasOnlineLogGroups() bool {
	if o != nil && o.OnlineLogGroups != nil {
		return true
	}

	return false
}

// SetOnlineLogGroups gets a reference to the given int32 and assigns it to the OnlineLogGroups field.
func (o *BaseProvisionVDBParameters) SetOnlineLogGroups(v int32) {
	o.OnlineLogGroups = &v
}

// GetArchiveLog returns the ArchiveLog field value if set, zero value otherwise.
func (o *BaseProvisionVDBParameters) GetArchiveLog() bool {
	if o == nil || o.ArchiveLog == nil {
		var ret bool
		return ret
	}
	return *o.ArchiveLog
}

// GetArchiveLogOk returns a tuple with the ArchiveLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParameters) GetArchiveLogOk() (*bool, bool) {
	if o == nil || o.ArchiveLog == nil {
		return nil, false
	}
	return o.ArchiveLog, true
}

// HasArchiveLog returns a boolean if a field has been set.
func (o *BaseProvisionVDBParameters) HasArchiveLog() bool {
	if o != nil && o.ArchiveLog != nil {
		return true
	}

	return false
}

// SetArchiveLog gets a reference to the given bool and assigns it to the ArchiveLog field.
func (o *BaseProvisionVDBParameters) SetArchiveLog(v bool) {
	o.ArchiveLog = &v
}

// GetNewDbid returns the NewDbid field value if set, zero value otherwise.
func (o *BaseProvisionVDBParameters) GetNewDbid() bool {
	if o == nil || o.NewDbid == nil {
		var ret bool
		return ret
	}
	return *o.NewDbid
}

// GetNewDbidOk returns a tuple with the NewDbid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParameters) GetNewDbidOk() (*bool, bool) {
	if o == nil || o.NewDbid == nil {
		return nil, false
	}
	return o.NewDbid, true
}

// HasNewDbid returns a boolean if a field has been set.
func (o *BaseProvisionVDBParameters) HasNewDbid() bool {
	if o != nil && o.NewDbid != nil {
		return true
	}

	return false
}

// SetNewDbid gets a reference to the given bool and assigns it to the NewDbid field.
func (o *BaseProvisionVDBParameters) SetNewDbid(v bool) {
	o.NewDbid = &v
}

// GetListenerIds returns the ListenerIds field value if set, zero value otherwise.
func (o *BaseProvisionVDBParameters) GetListenerIds() []string {
	if o == nil || o.ListenerIds == nil {
		var ret []string
		return ret
	}
	return o.ListenerIds
}

// GetListenerIdsOk returns a tuple with the ListenerIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParameters) GetListenerIdsOk() ([]string, bool) {
	if o == nil || o.ListenerIds == nil {
		return nil, false
	}
	return o.ListenerIds, true
}

// HasListenerIds returns a boolean if a field has been set.
func (o *BaseProvisionVDBParameters) HasListenerIds() bool {
	if o != nil && o.ListenerIds != nil {
		return true
	}

	return false
}

// SetListenerIds gets a reference to the given []string and assigns it to the ListenerIds field.
func (o *BaseProvisionVDBParameters) SetListenerIds(v []string) {
	o.ListenerIds = v
}

// GetCustomEnvVars returns the CustomEnvVars field value if set, zero value otherwise.
func (o *BaseProvisionVDBParameters) GetCustomEnvVars() map[string]string {
	if o == nil || o.CustomEnvVars == nil {
		var ret map[string]string
		return ret
	}
	return *o.CustomEnvVars
}

// GetCustomEnvVarsOk returns a tuple with the CustomEnvVars field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParameters) GetCustomEnvVarsOk() (*map[string]string, bool) {
	if o == nil || o.CustomEnvVars == nil {
		return nil, false
	}
	return o.CustomEnvVars, true
}

// HasCustomEnvVars returns a boolean if a field has been set.
func (o *BaseProvisionVDBParameters) HasCustomEnvVars() bool {
	if o != nil && o.CustomEnvVars != nil {
		return true
	}

	return false
}

// SetCustomEnvVars gets a reference to the given map[string]string and assigns it to the CustomEnvVars field.
func (o *BaseProvisionVDBParameters) SetCustomEnvVars(v map[string]string) {
	o.CustomEnvVars = &v
}

// GetCustomEnvFiles returns the CustomEnvFiles field value if set, zero value otherwise.
func (o *BaseProvisionVDBParameters) GetCustomEnvFiles() []string {
	if o == nil || o.CustomEnvFiles == nil {
		var ret []string
		return ret
	}
	return o.CustomEnvFiles
}

// GetCustomEnvFilesOk returns a tuple with the CustomEnvFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParameters) GetCustomEnvFilesOk() ([]string, bool) {
	if o == nil || o.CustomEnvFiles == nil {
		return nil, false
	}
	return o.CustomEnvFiles, true
}

// HasCustomEnvFiles returns a boolean if a field has been set.
func (o *BaseProvisionVDBParameters) HasCustomEnvFiles() bool {
	if o != nil && o.CustomEnvFiles != nil {
		return true
	}

	return false
}

// SetCustomEnvFiles gets a reference to the given []string and assigns it to the CustomEnvFiles field.
func (o *BaseProvisionVDBParameters) SetCustomEnvFiles(v []string) {
	o.CustomEnvFiles = v
}

func (o BaseProvisionVDBParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SourceDataId != nil {
		toSerialize["source_data_id"] = o.SourceDataId
	}
	if o.EngineId != nil {
		toSerialize["engine_id"] = o.EngineId
	}
	if o.TargetGroupId != nil {
		toSerialize["target_group_id"] = o.TargetGroupId
	}
	if o.VdbName != nil {
		toSerialize["vdb_name"] = o.VdbName
	}
	if o.DatabaseName != nil {
		toSerialize["database_name"] = o.DatabaseName
	}
	if o.TruncateLogOnCheckpoint != nil {
		toSerialize["truncate_log_on_checkpoint"] = o.TruncateLogOnCheckpoint
	}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}
	if o.Password != nil {
		toSerialize["password"] = o.Password
	}
	if o.EnvironmentId != nil {
		toSerialize["environment_id"] = o.EnvironmentId
	}
	if o.EnvironmentUserId != nil {
		toSerialize["environment_user_id"] = o.EnvironmentUserId
	}
	if o.RepositoryId != nil {
		toSerialize["repository_id"] = o.RepositoryId
	}
	if o.AutoSelectRepository != nil {
		toSerialize["auto_select_repository"] = o.AutoSelectRepository
	}
	if o.PreRefresh != nil {
		toSerialize["pre_refresh"] = o.PreRefresh
	}
	if o.PostRefresh != nil {
		toSerialize["post_refresh"] = o.PostRefresh
	}
	if o.PreRollback != nil {
		toSerialize["pre_rollback"] = o.PreRollback
	}
	if o.PostRollback != nil {
		toSerialize["post_rollback"] = o.PostRollback
	}
	if o.ConfigureClone != nil {
		toSerialize["configure_clone"] = o.ConfigureClone
	}
	if o.PreSnapshot != nil {
		toSerialize["pre_snapshot"] = o.PreSnapshot
	}
	if o.PostSnapshot != nil {
		toSerialize["post_snapshot"] = o.PostSnapshot
	}
	if o.PreStart != nil {
		toSerialize["pre_start"] = o.PreStart
	}
	if o.PostStart != nil {
		toSerialize["post_start"] = o.PostStart
	}
	if o.PreStop != nil {
		toSerialize["pre_stop"] = o.PreStop
	}
	if o.PostStop != nil {
		toSerialize["post_stop"] = o.PostStop
	}
	if o.VdbRestart != nil {
		toSerialize["vdb_restart"] = o.VdbRestart
	}
	if o.TemplateId != nil {
		toSerialize["template_id"] = o.TemplateId
	}
	if o.FileMappingRules != nil {
		toSerialize["file_mapping_rules"] = o.FileMappingRules
	}
	if o.OracleInstanceName != nil {
		toSerialize["oracle_instance_name"] = o.OracleInstanceName
	}
	if o.UniqueName != nil {
		toSerialize["unique_name"] = o.UniqueName
	}
	if o.MountPoint != nil {
		toSerialize["mount_point"] = o.MountPoint
	}
	if o.OpenResetLogs != nil {
		toSerialize["open_reset_logs"] = o.OpenResetLogs
	}
	if o.SnapshotPolicyId != nil {
		toSerialize["snapshot_policy_id"] = o.SnapshotPolicyId
	}
	if o.RetentionPolicyId != nil {
		toSerialize["retention_policy_id"] = o.RetentionPolicyId
	}
	if o.RecoveryModel != nil {
		toSerialize["recovery_model"] = o.RecoveryModel
	}
	if o.PreScript != nil {
		toSerialize["pre_script"] = o.PreScript
	}
	if o.PostScript != nil {
		toSerialize["post_script"] = o.PostScript
	}
	if o.CdcOnProvision != nil {
		toSerialize["cdc_on_provision"] = o.CdcOnProvision
	}
	if o.OnlineLogSize != nil {
		toSerialize["online_log_size"] = o.OnlineLogSize
	}
	if o.OnlineLogGroups != nil {
		toSerialize["online_log_groups"] = o.OnlineLogGroups
	}
	if o.ArchiveLog != nil {
		toSerialize["archive_log"] = o.ArchiveLog
	}
	if o.NewDbid != nil {
		toSerialize["new_dbid"] = o.NewDbid
	}
	if o.ListenerIds != nil {
		toSerialize["listener_ids"] = o.ListenerIds
	}
	if o.CustomEnvVars != nil {
		toSerialize["custom_env_vars"] = o.CustomEnvVars
	}
	if o.CustomEnvFiles != nil {
		toSerialize["custom_env_files"] = o.CustomEnvFiles
	}
	return json.Marshal(toSerialize)
}

type NullableBaseProvisionVDBParameters struct {
	value *BaseProvisionVDBParameters
	isSet bool
}

func (v NullableBaseProvisionVDBParameters) Get() *BaseProvisionVDBParameters {
	return v.value
}

func (v *NullableBaseProvisionVDBParameters) Set(val *BaseProvisionVDBParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseProvisionVDBParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseProvisionVDBParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseProvisionVDBParameters(val *BaseProvisionVDBParameters) *NullableBaseProvisionVDBParameters {
	return &NullableBaseProvisionVDBParameters{value: val, isSet: true}
}

func (v NullableBaseProvisionVDBParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseProvisionVDBParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


