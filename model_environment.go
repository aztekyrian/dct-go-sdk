/*
Delphix API Gateway

Delphix API Gateway API

API version: 1.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Environment A grouping of a single host or a cluster of hosts.
type Environment struct {
	// The Environment object entity ID.
	Id *string `json:"id,omitempty"`
	// The name of this environment.
	Name *string `json:"name,omitempty"`
	// The namespace of this environment for replicated and restored objects.
	Namespace NullableString `json:"namespace,omitempty"`
	// A reference to the Engine that this Environment connection is associated with.
	EngineId *int64 `json:"engine_id,omitempty"`
	// True if this environment is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// True if this environment is a cluster of hosts.
	IsCluster *bool `json:"is_cluster,omitempty"`
	// The hosts that are part of this environment.
	Hosts []Host `json:"hosts,omitempty"`
}

// NewEnvironment instantiates a new Environment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironment() *Environment {
	this := Environment{}
	return &this
}

// NewEnvironmentWithDefaults instantiates a new Environment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentWithDefaults() *Environment {
	this := Environment{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Environment) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Environment) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Environment) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Environment) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Environment) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Environment) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Environment) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Environment) SetName(v string) {
	o.Name = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Environment) GetNamespace() string {
	if o == nil || o.Namespace.Get() == nil {
		var ret string
		return ret
	}
	return *o.Namespace.Get()
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Environment) GetNamespaceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Namespace.Get(), o.Namespace.IsSet()
}

// HasNamespace returns a boolean if a field has been set.
func (o *Environment) HasNamespace() bool {
	if o != nil && o.Namespace.IsSet() {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given NullableString and assigns it to the Namespace field.
func (o *Environment) SetNamespace(v string) {
	o.Namespace.Set(&v)
}
// SetNamespaceNil sets the value for Namespace to be an explicit nil
func (o *Environment) SetNamespaceNil() {
	o.Namespace.Set(nil)
}

// UnsetNamespace ensures that no value is present for Namespace, not even an explicit nil
func (o *Environment) UnsetNamespace() {
	o.Namespace.Unset()
}

// GetEngineId returns the EngineId field value if set, zero value otherwise.
func (o *Environment) GetEngineId() int64 {
	if o == nil || o.EngineId == nil {
		var ret int64
		return ret
	}
	return *o.EngineId
}

// GetEngineIdOk returns a tuple with the EngineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Environment) GetEngineIdOk() (*int64, bool) {
	if o == nil || o.EngineId == nil {
		return nil, false
	}
	return o.EngineId, true
}

// HasEngineId returns a boolean if a field has been set.
func (o *Environment) HasEngineId() bool {
	if o != nil && o.EngineId != nil {
		return true
	}

	return false
}

// SetEngineId gets a reference to the given int64 and assigns it to the EngineId field.
func (o *Environment) SetEngineId(v int64) {
	o.EngineId = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *Environment) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Environment) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *Environment) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *Environment) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetIsCluster returns the IsCluster field value if set, zero value otherwise.
func (o *Environment) GetIsCluster() bool {
	if o == nil || o.IsCluster == nil {
		var ret bool
		return ret
	}
	return *o.IsCluster
}

// GetIsClusterOk returns a tuple with the IsCluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Environment) GetIsClusterOk() (*bool, bool) {
	if o == nil || o.IsCluster == nil {
		return nil, false
	}
	return o.IsCluster, true
}

// HasIsCluster returns a boolean if a field has been set.
func (o *Environment) HasIsCluster() bool {
	if o != nil && o.IsCluster != nil {
		return true
	}

	return false
}

// SetIsCluster gets a reference to the given bool and assigns it to the IsCluster field.
func (o *Environment) SetIsCluster(v bool) {
	o.IsCluster = &v
}

// GetHosts returns the Hosts field value if set, zero value otherwise.
func (o *Environment) GetHosts() []Host {
	if o == nil || o.Hosts == nil {
		var ret []Host
		return ret
	}
	return o.Hosts
}

// GetHostsOk returns a tuple with the Hosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Environment) GetHostsOk() ([]Host, bool) {
	if o == nil || o.Hosts == nil {
		return nil, false
	}
	return o.Hosts, true
}

// HasHosts returns a boolean if a field has been set.
func (o *Environment) HasHosts() bool {
	if o != nil && o.Hosts != nil {
		return true
	}

	return false
}

// SetHosts gets a reference to the given []Host and assigns it to the Hosts field.
func (o *Environment) SetHosts(v []Host) {
	o.Hosts = v
}

func (o Environment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Namespace.IsSet() {
		toSerialize["namespace"] = o.Namespace.Get()
	}
	if o.EngineId != nil {
		toSerialize["engine_id"] = o.EngineId
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.IsCluster != nil {
		toSerialize["is_cluster"] = o.IsCluster
	}
	if o.Hosts != nil {
		toSerialize["hosts"] = o.Hosts
	}
	return json.Marshal(toSerialize)
}

type NullableEnvironment struct {
	value *Environment
	isSet bool
}

func (v NullableEnvironment) Get() *Environment {
	return v.value
}

func (v *NullableEnvironment) Set(val *Environment) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironment) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironment(val *Environment) *NullableEnvironment {
	return &NullableEnvironment{value: val, isSet: true}
}

func (v NullableEnvironment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


