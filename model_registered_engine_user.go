/*
Delphix API Gateway

Delphix API Gateway API

API version: 1.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RegisteredEngineUser An engine user.
type RegisteredEngineUser struct {
	Id *int64 `json:"id,omitempty"`
	Username NullableString `json:"username,omitempty"`
	Password NullableString `json:"password,omitempty"`
	// Arguments to pass to the Vault CLI tool to retrieve the username for the engine.
	HashicorpVaultUsernameCommandArgs []string `json:"hashicorp_vault_username_command_args,omitempty"`
	// Arguments to pass to the Vault CLI tool to retrieve the password for the engine.
	HashicorpVaultPasswordCommandArgs []string `json:"hashicorp_vault_password_command_args,omitempty"`
	// Reference to the Hashicorp vault to use to retrieve engine credentials.
	HashicorpVaultId NullableInt64 `json:"hashicorp_vault_id,omitempty"`
}

// NewRegisteredEngineUser instantiates a new RegisteredEngineUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisteredEngineUser() *RegisteredEngineUser {
	this := RegisteredEngineUser{}
	return &this
}

// NewRegisteredEngineUserWithDefaults instantiates a new RegisteredEngineUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisteredEngineUserWithDefaults() *RegisteredEngineUser {
	this := RegisteredEngineUser{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RegisteredEngineUser) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredEngineUser) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RegisteredEngineUser) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *RegisteredEngineUser) SetId(v int64) {
	o.Id = &v
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngineUser) GetUsername() string {
	if o == nil || o.Username.Get() == nil {
		var ret string
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngineUser) GetUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *RegisteredEngineUser) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableString and assigns it to the Username field.
func (o *RegisteredEngineUser) SetUsername(v string) {
	o.Username.Set(&v)
}
// SetUsernameNil sets the value for Username to be an explicit nil
func (o *RegisteredEngineUser) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *RegisteredEngineUser) UnsetUsername() {
	o.Username.Unset()
}

// GetPassword returns the Password field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngineUser) GetPassword() string {
	if o == nil || o.Password.Get() == nil {
		var ret string
		return ret
	}
	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngineUser) GetPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// HasPassword returns a boolean if a field has been set.
func (o *RegisteredEngineUser) HasPassword() bool {
	if o != nil && o.Password.IsSet() {
		return true
	}

	return false
}

// SetPassword gets a reference to the given NullableString and assigns it to the Password field.
func (o *RegisteredEngineUser) SetPassword(v string) {
	o.Password.Set(&v)
}
// SetPasswordNil sets the value for Password to be an explicit nil
func (o *RegisteredEngineUser) SetPasswordNil() {
	o.Password.Set(nil)
}

// UnsetPassword ensures that no value is present for Password, not even an explicit nil
func (o *RegisteredEngineUser) UnsetPassword() {
	o.Password.Unset()
}

// GetHashicorpVaultUsernameCommandArgs returns the HashicorpVaultUsernameCommandArgs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngineUser) GetHashicorpVaultUsernameCommandArgs() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.HashicorpVaultUsernameCommandArgs
}

// GetHashicorpVaultUsernameCommandArgsOk returns a tuple with the HashicorpVaultUsernameCommandArgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngineUser) GetHashicorpVaultUsernameCommandArgsOk() ([]string, bool) {
	if o == nil || o.HashicorpVaultUsernameCommandArgs == nil {
		return nil, false
	}
	return o.HashicorpVaultUsernameCommandArgs, true
}

// HasHashicorpVaultUsernameCommandArgs returns a boolean if a field has been set.
func (o *RegisteredEngineUser) HasHashicorpVaultUsernameCommandArgs() bool {
	if o != nil && o.HashicorpVaultUsernameCommandArgs != nil {
		return true
	}

	return false
}

// SetHashicorpVaultUsernameCommandArgs gets a reference to the given []string and assigns it to the HashicorpVaultUsernameCommandArgs field.
func (o *RegisteredEngineUser) SetHashicorpVaultUsernameCommandArgs(v []string) {
	o.HashicorpVaultUsernameCommandArgs = v
}

// GetHashicorpVaultPasswordCommandArgs returns the HashicorpVaultPasswordCommandArgs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngineUser) GetHashicorpVaultPasswordCommandArgs() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.HashicorpVaultPasswordCommandArgs
}

// GetHashicorpVaultPasswordCommandArgsOk returns a tuple with the HashicorpVaultPasswordCommandArgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngineUser) GetHashicorpVaultPasswordCommandArgsOk() ([]string, bool) {
	if o == nil || o.HashicorpVaultPasswordCommandArgs == nil {
		return nil, false
	}
	return o.HashicorpVaultPasswordCommandArgs, true
}

// HasHashicorpVaultPasswordCommandArgs returns a boolean if a field has been set.
func (o *RegisteredEngineUser) HasHashicorpVaultPasswordCommandArgs() bool {
	if o != nil && o.HashicorpVaultPasswordCommandArgs != nil {
		return true
	}

	return false
}

// SetHashicorpVaultPasswordCommandArgs gets a reference to the given []string and assigns it to the HashicorpVaultPasswordCommandArgs field.
func (o *RegisteredEngineUser) SetHashicorpVaultPasswordCommandArgs(v []string) {
	o.HashicorpVaultPasswordCommandArgs = v
}

// GetHashicorpVaultId returns the HashicorpVaultId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngineUser) GetHashicorpVaultId() int64 {
	if o == nil || o.HashicorpVaultId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.HashicorpVaultId.Get()
}

// GetHashicorpVaultIdOk returns a tuple with the HashicorpVaultId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngineUser) GetHashicorpVaultIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HashicorpVaultId.Get(), o.HashicorpVaultId.IsSet()
}

// HasHashicorpVaultId returns a boolean if a field has been set.
func (o *RegisteredEngineUser) HasHashicorpVaultId() bool {
	if o != nil && o.HashicorpVaultId.IsSet() {
		return true
	}

	return false
}

// SetHashicorpVaultId gets a reference to the given NullableInt64 and assigns it to the HashicorpVaultId field.
func (o *RegisteredEngineUser) SetHashicorpVaultId(v int64) {
	o.HashicorpVaultId.Set(&v)
}
// SetHashicorpVaultIdNil sets the value for HashicorpVaultId to be an explicit nil
func (o *RegisteredEngineUser) SetHashicorpVaultIdNil() {
	o.HashicorpVaultId.Set(nil)
}

// UnsetHashicorpVaultId ensures that no value is present for HashicorpVaultId, not even an explicit nil
func (o *RegisteredEngineUser) UnsetHashicorpVaultId() {
	o.HashicorpVaultId.Unset()
}

func (o RegisteredEngineUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Username.IsSet() {
		toSerialize["username"] = o.Username.Get()
	}
	if o.Password.IsSet() {
		toSerialize["password"] = o.Password.Get()
	}
	if o.HashicorpVaultUsernameCommandArgs != nil {
		toSerialize["hashicorp_vault_username_command_args"] = o.HashicorpVaultUsernameCommandArgs
	}
	if o.HashicorpVaultPasswordCommandArgs != nil {
		toSerialize["hashicorp_vault_password_command_args"] = o.HashicorpVaultPasswordCommandArgs
	}
	if o.HashicorpVaultId.IsSet() {
		toSerialize["hashicorp_vault_id"] = o.HashicorpVaultId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRegisteredEngineUser struct {
	value *RegisteredEngineUser
	isSet bool
}

func (v NullableRegisteredEngineUser) Get() *RegisteredEngineUser {
	return v.value
}

func (v *NullableRegisteredEngineUser) Set(val *RegisteredEngineUser) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisteredEngineUser) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisteredEngineUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisteredEngineUser(val *RegisteredEngineUser) *NullableRegisteredEngineUser {
	return &NullableRegisteredEngineUser{value: val, isSet: true}
}

func (v NullableRegisteredEngineUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisteredEngineUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


