/*
Delphix API Gateway

Delphix API Gateway API

API version: 1.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// DSource The Delphix storage-based copy of the source databse including its history.
type DSource struct {
	// The dSource object entity ID.
	Id *string `json:"id,omitempty"`
	// The database type of this dSource.
	DatabaseType NullableString `json:"database_type,omitempty"`
	// The container name of this dSource.
	Name NullableString `json:"name,omitempty"`
	// The database version of this dSource.
	DatabaseVersion NullableString `json:"database_version,omitempty"`
	// A universal ID that uniquely identifies the dSource database.
	DataUuid NullableString `json:"data_uuid,omitempty"`
	// The actual space used by this dSource, in bytes.
	StorageSize NullableInt64 `json:"storage_size,omitempty"`
	// The version of the plugin associated with this source database.
	PluginVersion NullableString `json:"plugin_version,omitempty"`
	// The date this dSource was created.
	CreationDate NullableTime `json:"creation_date,omitempty"`
	// The name of the group containing this dSource.
	GroupName NullableString `json:"group_name,omitempty"`
	// A value indicating whether this dSource is enabled.
	Enabled NullableBool `json:"enabled,omitempty"`
	// A reference to the Engine that this dSource belongs to.
	EngineId *string `json:"engine_id,omitempty"`
	// A reference to the Source associated with this dSource.
	SourceId NullableString `json:"source_id,omitempty"`
	// The runtime status of the dSource. 'Unknown' if all attempts to connect to the source failed.
	Status NullableString `json:"status,omitempty"`
}

// NewDSource instantiates a new DSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDSource() *DSource {
	this := DSource{}
	return &this
}

// NewDSourceWithDefaults instantiates a new DSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDSourceWithDefaults() *DSource {
	this := DSource{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DSource) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DSource) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DSource) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DSource) SetId(v string) {
	o.Id = &v
}

// GetDatabaseType returns the DatabaseType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DSource) GetDatabaseType() string {
	if o == nil || o.DatabaseType.Get() == nil {
		var ret string
		return ret
	}
	return *o.DatabaseType.Get()
}

// GetDatabaseTypeOk returns a tuple with the DatabaseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DSource) GetDatabaseTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DatabaseType.Get(), o.DatabaseType.IsSet()
}

// HasDatabaseType returns a boolean if a field has been set.
func (o *DSource) HasDatabaseType() bool {
	if o != nil && o.DatabaseType.IsSet() {
		return true
	}

	return false
}

// SetDatabaseType gets a reference to the given NullableString and assigns it to the DatabaseType field.
func (o *DSource) SetDatabaseType(v string) {
	o.DatabaseType.Set(&v)
}
// SetDatabaseTypeNil sets the value for DatabaseType to be an explicit nil
func (o *DSource) SetDatabaseTypeNil() {
	o.DatabaseType.Set(nil)
}

// UnsetDatabaseType ensures that no value is present for DatabaseType, not even an explicit nil
func (o *DSource) UnsetDatabaseType() {
	o.DatabaseType.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DSource) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DSource) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *DSource) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *DSource) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *DSource) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *DSource) UnsetName() {
	o.Name.Unset()
}

// GetDatabaseVersion returns the DatabaseVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DSource) GetDatabaseVersion() string {
	if o == nil || o.DatabaseVersion.Get() == nil {
		var ret string
		return ret
	}
	return *o.DatabaseVersion.Get()
}

// GetDatabaseVersionOk returns a tuple with the DatabaseVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DSource) GetDatabaseVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DatabaseVersion.Get(), o.DatabaseVersion.IsSet()
}

// HasDatabaseVersion returns a boolean if a field has been set.
func (o *DSource) HasDatabaseVersion() bool {
	if o != nil && o.DatabaseVersion.IsSet() {
		return true
	}

	return false
}

// SetDatabaseVersion gets a reference to the given NullableString and assigns it to the DatabaseVersion field.
func (o *DSource) SetDatabaseVersion(v string) {
	o.DatabaseVersion.Set(&v)
}
// SetDatabaseVersionNil sets the value for DatabaseVersion to be an explicit nil
func (o *DSource) SetDatabaseVersionNil() {
	o.DatabaseVersion.Set(nil)
}

// UnsetDatabaseVersion ensures that no value is present for DatabaseVersion, not even an explicit nil
func (o *DSource) UnsetDatabaseVersion() {
	o.DatabaseVersion.Unset()
}

// GetDataUuid returns the DataUuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DSource) GetDataUuid() string {
	if o == nil || o.DataUuid.Get() == nil {
		var ret string
		return ret
	}
	return *o.DataUuid.Get()
}

// GetDataUuidOk returns a tuple with the DataUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DSource) GetDataUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DataUuid.Get(), o.DataUuid.IsSet()
}

// HasDataUuid returns a boolean if a field has been set.
func (o *DSource) HasDataUuid() bool {
	if o != nil && o.DataUuid.IsSet() {
		return true
	}

	return false
}

// SetDataUuid gets a reference to the given NullableString and assigns it to the DataUuid field.
func (o *DSource) SetDataUuid(v string) {
	o.DataUuid.Set(&v)
}
// SetDataUuidNil sets the value for DataUuid to be an explicit nil
func (o *DSource) SetDataUuidNil() {
	o.DataUuid.Set(nil)
}

// UnsetDataUuid ensures that no value is present for DataUuid, not even an explicit nil
func (o *DSource) UnsetDataUuid() {
	o.DataUuid.Unset()
}

// GetStorageSize returns the StorageSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DSource) GetStorageSize() int64 {
	if o == nil || o.StorageSize.Get() == nil {
		var ret int64
		return ret
	}
	return *o.StorageSize.Get()
}

// GetStorageSizeOk returns a tuple with the StorageSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DSource) GetStorageSizeOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StorageSize.Get(), o.StorageSize.IsSet()
}

// HasStorageSize returns a boolean if a field has been set.
func (o *DSource) HasStorageSize() bool {
	if o != nil && o.StorageSize.IsSet() {
		return true
	}

	return false
}

// SetStorageSize gets a reference to the given NullableInt64 and assigns it to the StorageSize field.
func (o *DSource) SetStorageSize(v int64) {
	o.StorageSize.Set(&v)
}
// SetStorageSizeNil sets the value for StorageSize to be an explicit nil
func (o *DSource) SetStorageSizeNil() {
	o.StorageSize.Set(nil)
}

// UnsetStorageSize ensures that no value is present for StorageSize, not even an explicit nil
func (o *DSource) UnsetStorageSize() {
	o.StorageSize.Unset()
}

// GetPluginVersion returns the PluginVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DSource) GetPluginVersion() string {
	if o == nil || o.PluginVersion.Get() == nil {
		var ret string
		return ret
	}
	return *o.PluginVersion.Get()
}

// GetPluginVersionOk returns a tuple with the PluginVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DSource) GetPluginVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PluginVersion.Get(), o.PluginVersion.IsSet()
}

// HasPluginVersion returns a boolean if a field has been set.
func (o *DSource) HasPluginVersion() bool {
	if o != nil && o.PluginVersion.IsSet() {
		return true
	}

	return false
}

// SetPluginVersion gets a reference to the given NullableString and assigns it to the PluginVersion field.
func (o *DSource) SetPluginVersion(v string) {
	o.PluginVersion.Set(&v)
}
// SetPluginVersionNil sets the value for PluginVersion to be an explicit nil
func (o *DSource) SetPluginVersionNil() {
	o.PluginVersion.Set(nil)
}

// UnsetPluginVersion ensures that no value is present for PluginVersion, not even an explicit nil
func (o *DSource) UnsetPluginVersion() {
	o.PluginVersion.Unset()
}

// GetCreationDate returns the CreationDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DSource) GetCreationDate() time.Time {
	if o == nil || o.CreationDate.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.CreationDate.Get()
}

// GetCreationDateOk returns a tuple with the CreationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DSource) GetCreationDateOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CreationDate.Get(), o.CreationDate.IsSet()
}

// HasCreationDate returns a boolean if a field has been set.
func (o *DSource) HasCreationDate() bool {
	if o != nil && o.CreationDate.IsSet() {
		return true
	}

	return false
}

// SetCreationDate gets a reference to the given NullableTime and assigns it to the CreationDate field.
func (o *DSource) SetCreationDate(v time.Time) {
	o.CreationDate.Set(&v)
}
// SetCreationDateNil sets the value for CreationDate to be an explicit nil
func (o *DSource) SetCreationDateNil() {
	o.CreationDate.Set(nil)
}

// UnsetCreationDate ensures that no value is present for CreationDate, not even an explicit nil
func (o *DSource) UnsetCreationDate() {
	o.CreationDate.Unset()
}

// GetGroupName returns the GroupName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DSource) GetGroupName() string {
	if o == nil || o.GroupName.Get() == nil {
		var ret string
		return ret
	}
	return *o.GroupName.Get()
}

// GetGroupNameOk returns a tuple with the GroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DSource) GetGroupNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.GroupName.Get(), o.GroupName.IsSet()
}

// HasGroupName returns a boolean if a field has been set.
func (o *DSource) HasGroupName() bool {
	if o != nil && o.GroupName.IsSet() {
		return true
	}

	return false
}

// SetGroupName gets a reference to the given NullableString and assigns it to the GroupName field.
func (o *DSource) SetGroupName(v string) {
	o.GroupName.Set(&v)
}
// SetGroupNameNil sets the value for GroupName to be an explicit nil
func (o *DSource) SetGroupNameNil() {
	o.GroupName.Set(nil)
}

// UnsetGroupName ensures that no value is present for GroupName, not even an explicit nil
func (o *DSource) UnsetGroupName() {
	o.GroupName.Unset()
}

// GetEnabled returns the Enabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DSource) GetEnabled() bool {
	if o == nil || o.Enabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.Enabled.Get()
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DSource) GetEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Enabled.Get(), o.Enabled.IsSet()
}

// HasEnabled returns a boolean if a field has been set.
func (o *DSource) HasEnabled() bool {
	if o != nil && o.Enabled.IsSet() {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given NullableBool and assigns it to the Enabled field.
func (o *DSource) SetEnabled(v bool) {
	o.Enabled.Set(&v)
}
// SetEnabledNil sets the value for Enabled to be an explicit nil
func (o *DSource) SetEnabledNil() {
	o.Enabled.Set(nil)
}

// UnsetEnabled ensures that no value is present for Enabled, not even an explicit nil
func (o *DSource) UnsetEnabled() {
	o.Enabled.Unset()
}

// GetEngineId returns the EngineId field value if set, zero value otherwise.
func (o *DSource) GetEngineId() string {
	if o == nil || o.EngineId == nil {
		var ret string
		return ret
	}
	return *o.EngineId
}

// GetEngineIdOk returns a tuple with the EngineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DSource) GetEngineIdOk() (*string, bool) {
	if o == nil || o.EngineId == nil {
		return nil, false
	}
	return o.EngineId, true
}

// HasEngineId returns a boolean if a field has been set.
func (o *DSource) HasEngineId() bool {
	if o != nil && o.EngineId != nil {
		return true
	}

	return false
}

// SetEngineId gets a reference to the given string and assigns it to the EngineId field.
func (o *DSource) SetEngineId(v string) {
	o.EngineId = &v
}

// GetSourceId returns the SourceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DSource) GetSourceId() string {
	if o == nil || o.SourceId.Get() == nil {
		var ret string
		return ret
	}
	return *o.SourceId.Get()
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DSource) GetSourceIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SourceId.Get(), o.SourceId.IsSet()
}

// HasSourceId returns a boolean if a field has been set.
func (o *DSource) HasSourceId() bool {
	if o != nil && o.SourceId.IsSet() {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given NullableString and assigns it to the SourceId field.
func (o *DSource) SetSourceId(v string) {
	o.SourceId.Set(&v)
}
// SetSourceIdNil sets the value for SourceId to be an explicit nil
func (o *DSource) SetSourceIdNil() {
	o.SourceId.Set(nil)
}

// UnsetSourceId ensures that no value is present for SourceId, not even an explicit nil
func (o *DSource) UnsetSourceId() {
	o.SourceId.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DSource) GetStatus() string {
	if o == nil || o.Status.Get() == nil {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DSource) GetStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *DSource) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *DSource) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *DSource) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *DSource) UnsetStatus() {
	o.Status.Unset()
}

func (o DSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.DatabaseType.IsSet() {
		toSerialize["database_type"] = o.DatabaseType.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.DatabaseVersion.IsSet() {
		toSerialize["database_version"] = o.DatabaseVersion.Get()
	}
	if o.DataUuid.IsSet() {
		toSerialize["data_uuid"] = o.DataUuid.Get()
	}
	if o.StorageSize.IsSet() {
		toSerialize["storage_size"] = o.StorageSize.Get()
	}
	if o.PluginVersion.IsSet() {
		toSerialize["plugin_version"] = o.PluginVersion.Get()
	}
	if o.CreationDate.IsSet() {
		toSerialize["creation_date"] = o.CreationDate.Get()
	}
	if o.GroupName.IsSet() {
		toSerialize["group_name"] = o.GroupName.Get()
	}
	if o.Enabled.IsSet() {
		toSerialize["enabled"] = o.Enabled.Get()
	}
	if o.EngineId != nil {
		toSerialize["engine_id"] = o.EngineId
	}
	if o.SourceId.IsSet() {
		toSerialize["source_id"] = o.SourceId.Get()
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDSource struct {
	value *DSource
	isSet bool
}

func (v NullableDSource) Get() *DSource {
	return v.value
}

func (v *NullableDSource) Set(val *DSource) {
	v.value = val
	v.isSet = true
}

func (v NullableDSource) IsSet() bool {
	return v.isSet
}

func (v *NullableDSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDSource(val *DSource) *NullableDSource {
	return &NullableDSource{value: val, isSet: true}
}

func (v NullableDSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


